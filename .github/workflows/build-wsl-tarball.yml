name: Build NixOS WSL Tarball

on:
  push:
    branches:
      - main
    paths:
      - 'flake.nix'
      - 'flake.lock'
      - 'machines/nixos/tabris/**'
      - 'modules/wsl/**'
      - 'modules/home-manager/**'
      - '.github/workflows/build-wsl-tarball.yml'
  pull_request:
    paths:
      - 'flake.nix'
      - 'flake.lock'
      - 'machines/nixos/tabris/**'
      - 'modules/wsl/**'
      - 'modules/home-manager/**'
  workflow_dispatch:
    inputs:
      config:
        description: 'Configuration to build (tabris/adam)'
        required: false
        default: 'tabris'
      compress:
        description: 'Compression method (gzip/xz/bzip2/none)'
        required: false
        default: 'xz'
      release:
        description: 'Create a release (true/false)'
        required: false
        default: 'false'
  release:
    types: [created]

env:
  CACHIX_CACHE: nix-community
  NIX_BUILD_CORES: 4

jobs:
  build:
    name: Build WSL Tarball
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    strategy:
      matrix:
        config: [tabris]
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main
        with:
          extra-conf: |
            extra-substituters = https://cache.nixos.org https://cachix.cachix.org https://nixpkgs.cachix.org https://nix-community.cachix.org
            extra-trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= cachix.cachix.org-1:eWNHQldwUO7G2VkjpnjDbWwy4KQ/HNxht7H4SSoMckM= nixpkgs.cachix.org-1:q91R6hxbwFvDqTSDKwDAV4T5PxqXGxswD8vhONFMeOE= nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs=

      - name: Set up Nix cache
        uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Verify flake configuration
        run: |
          nix flake show
          nix flake check

      - name: Determine compression method
        id: compression
        run: |
          COMPRESS="${{ github.event.inputs.compress || 'xz' }}"
          echo "method=$COMPRESS" >> $GITHUB_OUTPUT
          echo "Compression method: $COMPRESS"

      - name: Build NixOS system
        id: build
        run: |
          set -e
          CONFIG="${{ github.event.inputs.config || matrix.config }}"
          echo "Building configuration: $CONFIG"

          RESULT=$(nix build \
            ".#nixosConfigurations.${CONFIG}.config.system.build.toplevel" \
            --system "x86_64-linux" \
            --no-link \
            --print-out-paths 2>&1 | tail -1)

          if [ -z "$RESULT" ] || [ ! -d "$RESULT" ]; then
            echo "Build failed or result not found"
            exit 1
          fi

          echo "result=$RESULT" >> $GITHUB_OUTPUT
          echo "config=$CONFIG" >> $GITHUB_OUTPUT

          # Get size
          SIZE=$(du -sh "$RESULT" | cut -f1)
          echo "System size: $SIZE"
          echo "size=$SIZE" >> $GITHUB_OUTPUT

      - name: Create tarball
        id: tarball
        env:
          COMPRESS: ${{ steps.compression.outputs.method }}
        run: |
          set -e

          RESULT="${{ steps.build.outputs.result }}"
          CONFIG="${{ steps.build.outputs.config }}"
          COMPRESS="${COMPRESS:-xz}"

          case "$COMPRESS" in
            gzip)
              COMPRESS_OPT="z"
              EXT=".tar.gz"
              DESC="gzip"
              ;;
            xz)
              COMPRESS_OPT="J"
              EXT=".tar.xz"
              DESC="xz"
              ;;
            bzip2)
              COMPRESS_OPT="j"
              EXT=".tar.bz2"
              DESC="bzip2"
              ;;
            none)
              COMPRESS_OPT=""
              EXT=".tar"
              DESC="uncompressed"
              ;;
            *)
              echo "Unknown compression method: $COMPRESS"
              exit 1
              ;;
          esac

          OUTPUT_FILE="nixos-wsl-${CONFIG}${EXT}"

          echo "Creating tarball with $DESC compression..."
          echo "Output file: $OUTPUT_FILE"

          tar --owner=0 --group=0 --numeric-owner \
              -c${COMPRESS_OPT}f "$OUTPUT_FILE" \
              -C "$RESULT" \
              . 2>&1 || {
            echo "Failed to create tarball"
            exit 1
          }

          if [ ! -f "$OUTPUT_FILE" ]; then
            echo "Tarball file not found after creation"
            exit 1
          fi

          # Get size
          TARBALL_SIZE=$(du -sh "$OUTPUT_FILE" | cut -f1)
          echo "Tarball size: $TARBALL_SIZE"

          # Calculate checksum
          SHA256=$(sha256sum "$OUTPUT_FILE" | cut -d' ' -f1)
          MD5=$(md5sum "$OUTPUT_FILE" | cut -d' ' -f1)

          echo "filename=$OUTPUT_FILE" >> $GITHUB_OUTPUT
          echo "size=$TARBALL_SIZE" >> $GITHUB_OUTPUT
          echo "sha256=$SHA256" >> $GITHUB_OUTPUT
          echo "md5=$MD5" >> $GITHUB_OUTPUT

          # Create checksums file
          echo "$SHA256  $OUTPUT_FILE" > "${OUTPUT_FILE}.sha256"
          echo "$MD5  $OUTPUT_FILE" > "${OUTPUT_FILE}.md5"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: nixos-wsl-${{ steps.build.outputs.config }}-${{ github.run_number }}
          path: |
            nixos-wsl-*.tar*
            nixos-wsl-*.sha256
            nixos-wsl-*.md5
          retention-days: 30

      - name: Generate release notes
        id: release-notes
        run: |
          CONFIG="${{ steps.build.outputs.config }}"
          SIZE="${{ steps.build.outputs.size }}"
          TARBALL_SIZE="${{ steps.tarball.outputs.size }}"
          FILENAME="${{ steps.tarball.outputs.filename }}"
          SHA256="${{ steps.tarball.outputs.sha256 }}"
          MD5="${{ steps.tarball.outputs.md5 }}"

          cat > release-notes.md << EOF
          # NixOS WSL Tarball Build

          ## Configuration: $CONFIG

          ### Build Information
          - **Build Date**: $(date -u +'%Y-%m-%d %H:%M:%S UTC')
          - **Commit**: \`${GITHUB_SHA:0:8}\`
          - **Branch**: $GITHUB_REF_NAME
          - **Run**: #$GITHUB_RUN_NUMBER

          ### System Sizes
          - **System (uncompressed)**: $SIZE
          - **Tarball**: $TARBALL_SIZE

          ### File Information
          - **Filename**: \`$FILENAME\`
          - **SHA256**: \`$SHA256\`
          - **MD5**: \`$MD5\`

          ### Installation Instructions

          #### On Windows (PowerShell as Administrator):
          \`\`\`powershell
          # Import the distribution
          wsl --import NixOS-$CONFIG C:\\WSL\\nixos-$CONFIG $FILENAME

          # Launch the distribution
          wsl -d NixOS-$CONFIG
          \`\`\`

          #### Inside WSL (First boot):
          \`\`\`bash
          # Update and rebuild
          nix flake update
          sudo nixos-rebuild switch
          \`\`\`

          ### Verification

          To verify the tarball integrity:
          \`\`\`bash
          # On Linux
          sha256sum -c $FILENAME.sha256

          # On Windows (PowerShell)
          (Get-FileHash $FILENAME -Algorithm SHA256).Hash -eq "$SHA256"
          \`\`\`

          ### Documentation
          - [Quick Start Guide](https://github.com/$GITHUB_REPOSITORY/blob/$GITHUB_REF_NAME/QUICK_START_WSL.md)
          - [Build Guide](https://github.com/$GITHUB_REPOSITORY/blob/$GITHUB_REF_NAME/WSL_BUILD_GUIDE.md)
          - [Deployment Flow](https://github.com/$GITHUB_REPOSITORY/blob/$GITHUB_REF_NAME/DEPLOYMENT_FLOW.md)

          EOF

          echo "Generated release notes"

      - name: Create GitHub Release
        if: github.event_name == 'release' || github.event.inputs.release == 'true'
        uses: softprops/action-gh-release@v1
        with:
          files: |
            nixos-wsl-*.tar*
            nixos-wsl-*.sha256
            nixos-wsl-*.md5
          body_path: release-notes.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const releaseNotes = fs.readFileSync('release-notes.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: releaseNotes
            });

      - name: Display build summary
        run: |
          cat << EOF

          ╔════════════════════════════════════════════════════════════════╗
          ║                    Build Summary                               ║
          ╚════════════════════════════════════════════════════════════════╝

          Configuration:     ${{ steps.build.outputs.config }}
          System Size:       ${{ steps.build.outputs.size }}
          Tarball File:      ${{ steps.tarball.outputs.filename }}
          Tarball Size:      ${{ steps.tarball.outputs.size }}
          Compression:       ${{ steps.compression.outputs.method }}

          SHA256: ${{ steps.tarball.outputs.sha256 }}
          MD5:    ${{ steps.tarball.outputs.md5 }}

          Artifact Retention: 30 days

          Next Steps:
          1. Download the tarball from artifacts
          2. Transfer to Windows machine
          3. Run: wsl --import NixOS-${{ steps.build.outputs.config }} C:\\WSL\\nixos-${{ steps.build.outputs.config }} <tarball>
          4. Inside WSL: sudo nixos-rebuild switch

          ═══════════════════════════════════════════════════════════════════

          EOF

  build-all:
    name: Build All Configurations
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.config == 'all'
    needs: build

    steps:
      - name: Summary
        run: |
          echo "All WSL configurations built successfully!"

  notification:
    name: Build Notification
    runs-on: ubuntu-latest
    if: always()
    needs: build

    steps:
      - name: Check build status
        run: |
          if [ "${{ needs.build.result }}" == "success" ]; then
            echo "✅ Build completed successfully"
            exit 0
          else
            echo "❌ Build failed"
            exit 1
          fi
